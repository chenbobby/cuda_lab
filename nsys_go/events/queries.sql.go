// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package events

import (
	"context"
)

const getCUDAMemoryUsageEvents = `-- name: GetCUDAMemoryUsageEvents :many
SELECT
    start,
    globalPid,
    deviceId,
    contextId,
    address,
    pc,
    bytes,
    memKind,
    memoryOperationType,
    name,
    correlationId,
    localMemoryPoolAddress,
    localMemoryPoolReleaseThreshold,
    localMemoryPoolSize,
    localMemoryPoolUtilizedSize,
    importedMemoryPoolAddress,
    importedMemoryPoolProcessId
FROM
    CUDA_GPU_MEMORY_USAGE_EVENTS
LIMIT 100
`

func (q *Queries) GetCUDAMemoryUsageEvents(ctx context.Context) ([]CUDAGPUMEMORYUSAGEEVENT, error) {
	rows, err := q.db.QueryContext(ctx, getCUDAMemoryUsageEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CUDAGPUMEMORYUSAGEEVENT
	for rows.Next() {
		var i CUDAGPUMEMORYUSAGEEVENT
		if err := rows.Scan(
			&i.Start,
			&i.Globalpid,
			&i.Deviceid,
			&i.Contextid,
			&i.Address,
			&i.Pc,
			&i.Bytes,
			&i.Memkind,
			&i.Memoryoperationtype,
			&i.Name,
			&i.Correlationid,
			&i.Localmemorypooladdress,
			&i.Localmemorypoolreleasethreshold,
			&i.Localmemorypoolsize,
			&i.Localmemorypoolutilizedsize,
			&i.Importedmemorypooladdress,
			&i.Importedmemorypoolprocessid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
